<div>

    <button class="create" id="btnCreate"
        onclick="document.getElementById('modalCreate').style.display = 'block';">Create Room
    </button>

</div>

<div class="modal" id="modalCreate">
    <div class="C-content">
        <span class="close" onclick="document.getElementById('modalCreate').style.display = 'none';">&times;
        </span>
        <h2>Create a Room</h2>
        <form [formGroup]="roomForm" (ngSubmit)="CreateRecord()">

            <ion-item>
                <ion-label position="floating">Name</ion-label>
                <ion-input formControlName="Name"></ion-input>
            </ion-item>

            <ion-item>
                <ion-label position="floating">Price</ion-label>
                <ion-input formControlName="Price"></ion-input>
            </ion-item>

            <ion-item>
                <ion-label position="floating">Address</ion-label>
                <ion-input formControlName="Address"></ion-input>
            </ion-item>

            <ion-item>
                <ion-label position="floating">Number of Bedspace</ion-label>
                <ion-input formControlName="NumBedSpace"></ion-input>
            </ion-item>

            <ion-item>
                <ion-label position="floating">Detail</ion-label>
                <ion-input formControlName="Detail"></ion-input>
            </ion-item>

            <ion-item>
                <ion-button (click)="CreateRecord()" [disabled]="roomForm.invalid">
                    <ion-icon size="small" slot="icon-only" name="add"></ion-icon>
                    &nbsp;Create Record
                </ion-button>
            </ion-item>

        </form>

    </div>
</div>


<div class="body">
    <div *ngFor="let item of roomList" class="room">
        <img src="assets/sample1.webp" width=275>
        <div id="na" value="na">{{item.Name}}</div>
        <div id="pr" value="pr">{{item.Price}}</div>
        <div id="ad" value="ad">{{item.Address}}</div>
        <div id="nbs" value="nbs">{{item.NumBedSpace}}</div>
        <div id="re" value="re">{{item.Detail}}</div>
        <ion-button [routerLink]="['/','edit-room',item.id]">Edit</ion-button>
        <ion-button onclick="document.getElementById('modalCreate').style.display = 'block';">Delete</ion-button>

    </div>
</div>
////
import { Component, OnInit } from '@angular/core';
import { FirebaseService } from '../services/firebase.service';
import { FormGroup, Validators, FormBuilder } from '@angular/forms';
import { AngularFireStorage } from '@angular/fire/compat/storage';

interface RoomData {
Name: string;
Price: number;
Address: string;
NumBedSpace: number;
Detail: string;
Available: number;
}

@Component({
selector: 'app-owner-panel',
templateUrl: './owner-panel.page.html',
styleUrls: ['./owner-panel.page.scss'],
})
export class OwnerPanelPage implements OnInit {
roomList!: any[];
roomData!: RoomData;
roomForm!: FormGroup;
nbs: any = 1;

constructor(
private af: AngularFireStorage,
private firebaseService: FirebaseService,
public fb: FormBuilder
) {
this.roomData = {} as RoomData;
}

ngOnInit() {
this.roomForm = this.fb.group({
Name: ['', [Validators.required]],
Price: ['', [Validators.required]],
Address: ['', [Validators.required]],
NumBedSpace: ['', [Validators.required]],
Detail: ['', [Validators.required]],
});

this.firebaseService.read_room().subscribe((data) => {
this.roomList = data;
console.log('stud list', this.roomList);
});
}

CreateRecord() {
if (this.af !== null) {
this.firebaseService
.create_room(this.roomForm.value)
.then((resp) => {
//Reset form
this.roomForm.reset();
})
.catch((error) => {
console.log(error);
});
}
}

RemoveRecord(rowID: any) {
this.firebaseService.delete_room(rowID);
}

EditRecord(record: any) {
record.isEdit = true;
record.EditName = record.Name;
record.EditPrice = record.Price;
record.EditAddress = record.Address;
record.EditNumBedSpace = record.NumBedSpace;
record.EditDetail = record.Detail;
}

UpdateRecord(recordRow: any) {
let record: any = {};
record['Name'] = recordRow.EditName;
record['Price'] = recordRow.EditPrice;
record['Address'] = recordRow.EditAddress;
record['NumBedSpace'] = recordRow.EditNumBedSpace;
record['Detail'] = recordRow.EditDetail;
this.firebaseService.update_room(recordRow.id, record);
recordRow.isEdit = false;
}
}

/////
.modal {
display: none; /* Hidden by default */
position: fixed; /* Stay in place */
z-index: 1; /* Sit on top */
padding-top: 100px; /* Location of the box */
left: 0;
top: 0;
width: 100%; /* Full width */
height: 100%; /* Full height */
overflow: auto; /* Enable scroll if needed */
background-color: rgb(0,0,0); /* Fallback color */
background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content */
.C-content {
background-color: #fefefe;
margin: auto;
padding: 20px;
border: 1px solid #888;
width: 80%;
}

/* The Close Button */
.close {
color: #aaaaaa;
float: right;
font-size: 28px;
font-weight: bold;
padding-bottom: 10px;
}

.close:hover,
.close:focus {
color: #000;
text-decoration: none;
cursor: pointer;
}

.body{
margin-left: 87px;
}

.room{
background: rgb(255, 255, 255, 0.8);
display: inline-block;
border: 3px outset rgb(194, 123, 17);
width: 21%;
min-width: 21%;
padding: 5px;
margin-top: 10px;
margin-left: 15px;
margin-right: 15px;
margin-bottom: 10px;
border-radius: 7px;
}

.room img{
border-radius: 12px;
}

#na{
font-size: 30px;
font-style: bold;
}

#pr{
font-size: 20px;
}

#ad{
font-size: 15px;
font-style: oblique;
}

#re{
font-size: 15px;
font-style: oblique;
}
/////